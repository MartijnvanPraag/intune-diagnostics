name: Deploy to Azure App Service

on:
  push:
    branches:
      - main
      - azure-app-service-deployment
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install Python dependencies
        run: |
          uv sync
          
      - name: Export requirements.txt for Azure
        run: |
          uv export --no-hashes --no-editable --format requirements-txt > requirements.txt
          echo "Generated requirements.txt:"
          head -20 requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
          echo "Frontend build completed"
          ls -la dist || echo "dist directory not found!"
          cd ..

      - name: Create deployment package
        run: |
          # For Azure App Service, we deploy the source and let Oryx build on the server
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy backend source
          cp -r backend deployment/
          
          # Copy frontend build
          if [ -d "frontend/dist" ]; then
            mkdir -p deployment/frontend
            cp -r frontend/dist deployment/frontend/dist
            echo "Frontend dist copied"
          else
            echo "Warning: frontend/dist not found"
          fi
          
          # Copy Python requirements (Oryx will use this)
          cp requirements.txt deployment/
          
          # Copy startup script to root (where Oryx expects it)
          cp startup.sh deployment/
          
          # List what we're deploying
          echo "Deployment package contents:"
          ls -la deployment/
          
          # Don't zip - deploy the folder directly
          # Azure App Service works better with folder deployment

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: deployment/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: deployment

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'intunediagnostics'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
          package: deployment
